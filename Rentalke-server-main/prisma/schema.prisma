// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
} 

enum UserRole {
  CLIENT
  MANAGER
  ADMIN
}

enum UnitAvailability {
  VACANT
  OCCUPIED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         String?
  email         String    @unique
  password      String?
  googleId      String?   @unique
  facebookId    String?   @unique
  role          UserRole  @default(CLIENT)
  resetPasswordOTP String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  estates       Estate[]
  buildings     Building[]
  rentalUnits   RentalUnit[]
  bookings      Booking[]
  reviews       Review[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  notifications    Notification[]

  @@map("users")
}

model PendingUser {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         String?
  email         String    @unique
  password      String
  role          UserRole  @default(CLIENT)
  otp           String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("pending_users")
}

model Estate {
  id            String    @id @default(cuid())
  managerId     String
  name          String
  noOfBuildings Int
  latitude      Float
  longitude     Float
  county        String
  subcounty     String
  estateFeatures String[]
  customFeatures   String[]
  description   String?
  images        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  manager       User      @relation(fields: [managerId], references: [id])
  buildings     Building[] @relation("EstateBuildings")
  rentalUnits   RentalUnit[] @relation("EstateUnits")
  bookings      Booking[]
  reviews       Review[]

  @@map("estates")
}

model Building {
  id              String    @id @default(cuid())
  managerId       String
  estateId        String
  name            String
  noOfFloors      Int
  noOfUnits       Int
  buildingFeatures String[]
  customFeatures   String[]
  images          String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  manager         User      @relation(fields: [managerId], references: [id])
  estate          Estate    @relation("EstateBuildings", fields: [estateId], references: [id], onDelete: Cascade)
  rentalUnits     RentalUnit[] @relation("BuildingUnits")
  bookings        Booking[]
  reviews         Review[]

  @@map("buildings")
}

model RentalUnit {
  id              String           @id @default(cuid())
  managerId       String
  estateId        String
  buildingId      String
  name            String
  unitType        String
  unitSize        String
  unitPrice       Float
  interiorFeatures String[]
  images          String[]
  availability    UnitAvailability @default(VACANT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  manager         User      @relation(fields: [managerId], references: [id])
  estate          Estate    @relation("EstateUnits", fields: [estateId], references: [id], onDelete: Cascade)
  building        Building  @relation("BuildingUnits", fields: [buildingId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  reviews         Review[]

  @@map("rental_units")
}

model Booking {
  id            String        @id @default(cuid())
  clientId      String
  estateId      String
  buildingId    String
  rentalUnitId  String
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  client        User        @relation(fields: [clientId], references: [id])
  estate        Estate      @relation(fields: [estateId], references: [id])
  building      Building    @relation(fields: [buildingId], references: [id])
  rentalUnit    RentalUnit @relation(fields: [rentalUnitId], references: [id])

  @@map("bookings")
}

model Notification {
  id            String    @id @default(cuid())
  userId        String
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Message {
  id            String    @id @default(cuid())
  senderId      String
  receiverId    String
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sender        User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver      User      @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Review {
  id            String    @id @default(cuid())
  userId        String
  estateId      String
  buildingId    String
  rentalUnitId  String
  rating        Int
  comment       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  estate        Estate      @relation(fields: [estateId], references: [id])
  building      Building    @relation(fields: [buildingId], references: [id])
  rentalUnit    RentalUnit @relation(fields: [rentalUnitId], references: [id])

  @@map("reviews")
}
